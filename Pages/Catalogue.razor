@page "/"
@using CloudPrice.Data
@using CloudPrice.Services
@using CloudPrice.IServices
@using AntDesign;
@using AntDesign.Select;
@using AntDesign.TableModels;
@using Radzen
@using Radzen.Blazor
@using System.Threading;

@inject ISizesService SizesService

<h3>Catalogue</h3>
@if (check_loading_tags)
{
    <Select Mode="tags"
            Placeholder="Provider"
            @bind-Values="@tags_select["provider"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[0])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="Skuname"
            @bind-Values="@tags_select["skuname"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[1])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="Region"
            @bind-Values="@tags_select["region"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[2])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="CPU"
            @bind-Values="@tags_select["cpu"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[3])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="RAM"
            @bind-Values="@tags_select["ram"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[4])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="Disk"
            @bind-Values="@tags_select["disk"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[5])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
    <Select Mode="tags"
            Placeholder="Max disk available"
            @bind-Values="@tags_select["maxdiskavailable"]"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="handleChangeTags"
            EnableSearch>
        <SelectOptions>
            @foreach (var item in _tags[6])
            {
                <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
        </SelectOptions>

    </Select>
}
@if (sizes == null)
{
    <div class="loading"></div>
}
else
{
<Table DataSource="sizes"
       TItem="Sizes"
       OnChange="onChange"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize">

    <AntDesign.Column TData="string" @bind-Field="context.provider" Sortable />
    <AntDesign.Column TData="string" @bind-Field="context.skuname" Sortable />
    <AntDesign.Column TData="string" @bind-Field="context.region" Sortable />
    <AntDesign.Column TData="int" @bind-Field="context.cpu" Sortable />
    <AntDesign.Column TData="int" @bind-Field="context.ram" Sortable />
    <AntDesign.Column TData="int" @bind-Field="context.disk" Sortable />
    <AntDesign.Column TData="int" @bind-Field="context.maxdiskavailable" Sortable />
</Table>
    <p>
        Page Index : @_pageIndex | Total : @_total
    </p>}

@code {
    List<List<string>> _tags = new List<List<string>>();

    AntDesign.ITable table;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;
    bool check_loading_tags = false;
    bool check_loading_tags_all = false;
    Sizes[] check_loading_sizes;
    Sizes[] sizes;

    Dictionary<string, IEnumerable<string>> tags_select = new Dictionary<string, IEnumerable<string>>() { };

    protected override async Task OnInitializedAsync()
    {
        tags_select.Add("provider", new List<string> { });
        tags_select.Add("skuname", new List<string> { });
        tags_select.Add("region", new List<string> { });
        tags_select.Add("cpu", new List<string> { });
        tags_select.Add("ram", new List<string> { });
        tags_select.Add("disk", new List<string> { });
        tags_select.Add("maxdiskavailable", new List<string> { });

        Thread t = new Thread(new ThreadStart(get_size));
        t.Start();
        base.OnInitialized();
        var timer = new System.Timers.Timer(100);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                if (check_loading_sizes != sizes)
                {
                    StateHasChanged();
                }
            });
        };
        timer.Start();
    }

    public void get_size()
    {
        var forcastList = SizesService.GetSizes_limited(_pageIndex, _pageSize);
        var totalcount = forcastList.Count;

        GridEntity<Sizes> list = new();
        list.Items = forcastList;
        list.TotalCount = totalcount;
        sizes = list.Items.ToArray();
        _pageIndex = 1;
        _pageSize = 10;
        _total = list.TotalCount;
    }

    public void get_tags()
    {
        if (!(check_loading_tags)) {
            _tags.Add(list_element("provider"));
            _tags.Add(list_element("skuname"));
            _tags.Add(list_element("region"));
            _tags.Add(list_element_int("cpu"));
            _tags.Add(list_element_int("ram"));
            _tags.Add(list_element_int("disk"));
            _tags.Add(list_element_int("maxdiskavailable"));
            check_loading_tags = true;
        }
        else if (!(check_loading_tags_all))
        {
            _tags[0] = list_element("provider");
            _tags[1] = list_element("skuname");
            _tags[2] = list_element("region");
            _tags[3] = list_element_int("cpu");
            _tags[4] = list_element_int("ram");
            _tags[5] = list_element_int("disk");
            _tags[6] = list_element_int("maxdiskavailable");
            check_loading_tags_all = true;
        }


    }

    private List<string> list_element(string element)
    {
        List<string> data = new();
        foreach (var each_element in sizes)
        {
            if (!(data.Contains((string)GetPropValue(each_element, element))))
            {
                data.Add((string)GetPropValue(each_element, element));
            }
        }
        return data;
    }

    private List<string> list_element_int(string element)
    {
        List<string> data = new();
        foreach (var each_element in sizes)
        {
            if (!(data.Contains(GetPropValue(each_element, element).ToString())))
            {
                data.Add(GetPropValue(each_element, element).ToString());
            }
        }
        return data;
    }

    public object GetPropValue(object src, string propName)
    {
        return src.GetType().GetProperty(propName).GetValue(src, null);
    }

    async Task onChange(QueryModel<Sizes> queryModel)
    {
        var data = await SizesService.GetSizesAsync(queryModel.PageIndex, queryModel.PageSize, queryModel, sizes);
        sizes = data.Items.ToArray();

        _pageIndex = queryModel.PageIndex;
        _pageSize = queryModel.PageSize;
        _total = data.TotalCount;
        get_tags();
    }

    public void handleChangeTags(IEnumerable<string> values)
    {
        Thread t = new Thread(new ThreadStart(handleChangeTags_get_new));
        t.Start();
    }

    public void handleChangeTags_get_new()
    {
        Console.WriteLine(tags_select);
        var data = SizesService.GetSizes_spe(tags_select);

        GridEntity<Sizes> list = new();
        list.Items = data;
        list.TotalCount = data.Count;
        sizes = list.Items.ToArray();
        _pageIndex = 1;
        _total = list.TotalCount;
        get_tags();
    }
}