@page "/Historic"
@using CloudPrice.Data
@using CloudPrice.IServices
@using MongoDB.Bson;

@inject IPricesService PricesService

<h3>Historic</h3>
<fieldset>

    <label for="Provider">Provider :</label>
    <select name="Provider" @bind="provider_input">
        @foreach (var provider in Provider)
        {
            <option value="@provider">@provider</option>
        }
    </select>

    @if (show_skuname == true)
    {
        <label for="Skuname">Skuname :</label>
        <select name="Skuname" @bind="skuname_input">
            @foreach (var skuname in Skuname)
            {
                <option value="@skuname">@skuname</option>
            }
        </select>
    }

</fieldset>
@if (show_skuname == true) {<button class="btn btn-primary" @onclick="@(async () => { GetHistoric(); })">Search</button>}
    
@if (show_graph == true)
{<Line Data="data" Config="lineConfig"></Line>}

@code {
    string provider_input = "";
    string skuname_input = "";
    bool show_graph = false;
    bool show_skuname = false;
    string check_provider_change = "";
    IEnumerable<BsonDocument> data;
    List<string> Provider = new();
    List<string> Skuname = new();

    LineConfig lineConfig = new LineConfig()
    {
        Title = new AntDesign.Charts.Title()
        {
            Visible = true,
            Text = "Price Historic"
        },
        Description = new Description()
        {
            Visible = true,
            Text = "Evolution of price"
        },
        Padding = "auto",
        ForceFit = true,
        XField = "effectivedate",
        YField = "priceperunit",
        Smooth = true
    };

    protected override async Task OnInitializedAsync()
    {
        Provider = PricesService.GetProvider();

        base.OnInitialized();
        var timer = new System.Timers.Timer(100);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                if (check_provider_change != provider_input)
                {
                    check_provider_change = provider_input;
                    show_skuname = true;
                    Skuname = PricesService.GetSkuname(provider_input);
                    StateHasChanged();
                }
            });
        };
        timer.Start();
    }

    protected void GetHistoric()
    {
        show_graph = true;
        data = PricesService.GetHistoric(skuname_input);
    }
}
