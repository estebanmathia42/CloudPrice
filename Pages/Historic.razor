@page "/Historic"
@using CloudPrice.Data
@using CloudPrice.IServices
@using MongoDB.Bson;

@inject IPricesService PricesService
@inject IJSRuntime JsRuntime

<h3>Historic</h3>
<fieldset>

    <label for="Provider">Provider :</label>
    <select name="Provider" @bind="provider_input">
        @foreach (var provider in Provider)
        {
            <option value="@provider">@provider</option>
        }
    </select>

    @if (show_skuname == true)
    {
        <label for="Skuname">Skuname :</label>
        <select name="Skuname" @bind="skuname_input">
            @foreach (var skuname in Skuname)
            {
                <option value="@skuname">@skuname</option>
            }
        </select>
    }

    @if (show_region == true)
    {
        <label for="Region">Region :</label>
        <select name="Region" @bind="region_input">
            @foreach (var region in Region)
            {
                <option value="@region">@region</option>
            }
        </select>
    }

    @if (show_billingtype == true)
    {
        <label for="Billingtype">Billingtype :</label>
        <select name="Billingtype" @bind="billingtype_input">
            @foreach (var billingtype in Billingtype)
            {
                <option value="@billingtype">@billingtype</option>
            }
        </select>
    }
</fieldset>
@if (show_button == true)
{<button class="btn btn-primary" @onclick="@(async () => { GetHistoric(); })">Search</button>}

@if (show_graph == true)
{
    <Area Data="data" Config="areaConfig"/>
}

@code {
    string provider_input = "";
    string skuname_input = "";
    string region_input = "";
    string billingtype_input = "";
    bool show_graph = false;
    bool show_skuname = false;
    bool show_region = false;
    bool show_billingtype = false;
    bool show_button = false;
    string check_provider_change = "";
    string check_skuname_change = "";
    string check_region_change = "";
    string check_billingtype_change = "";
    List<Prices> data;
    List<string> Provider = new();
    List<string> Skuname = new();
    List<string> Region = new();
    List<string> Billingtype = new();
    AreaConfig areaConfig = new AreaConfig()
    {
        Title = new AntDesign.Charts.Title()
        {
            Visible = true,
            Text = "Price Historic"
        },
        Description = new Description()
        {
            Visible = true,
            Text = "The currency is USD"
        },
        Padding = "auto",
        ForceFit = true,
        XField = "effectivedate",
        YField = "priceperunit",
    };

    protected override async Task OnInitializedAsync()
    {
        Provider = PricesService.GetProvider();

        base.OnInitialized();
        var timer = new System.Timers.Timer(100);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                if (check_provider_change != provider_input)
                {
                    check_provider_change = provider_input;
                    show_skuname = true;
                    Skuname = PricesService.GetSkuname(provider_input);
                    StateHasChanged();
                }
                if (check_skuname_change != skuname_input)
                {
                    check_skuname_change = skuname_input;
                    show_region = true;
                    Region = PricesService.GetRegion(skuname_input);
                    StateHasChanged();
                }
                if (check_region_change != region_input)
                {
                    check_region_change = region_input;
                    show_billingtype = true;
                    Billingtype = PricesService.GetBillingtype(region_input, skuname_input);
                    StateHasChanged();
                }
                if (check_billingtype_change != billingtype_input)
                {
                    check_billingtype_change = billingtype_input;
                    show_button = true;
                    StateHasChanged();
                }
            });
        };
        timer.Start();
    }

    protected async void GetHistoric()
    {
        data = PricesService.GetHistoric(skuname_input, region_input, billingtype_input);
        data = data.OrderBy(o => this.GetPropValue(o, "effectivedate")).ToList();
        try {
            if (data.Count() > 1)
            {
                show_graph = true;
            }
            else if ( data.Count() == 1)
            {
                await JsRuntime.InvokeVoidAsync("alert", String.Format("We Just have one price and it's {0} {1} per {2}", data[0].priceperunit, data[0].currency, data[0].unit));
            }
            else if (data.Count() <= 0)
            {
                await JsRuntime.InvokeVoidAsync("alert", "No price kown");
            }
        } catch {
            await JsRuntime.InvokeVoidAsync("alert", "No price kown");
        }

    }

    public object GetPropValue(object src, string propName)
    {
        return src.GetType().GetProperty(propName).GetValue(src, null);
    }
}